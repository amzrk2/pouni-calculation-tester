{"version":3,"sources":["assets/svg/HomeChecked.svg","components/Footer/index.js","views/Home/index.js","store/start/actions.js","views/Start/components/QuestionType/index.js","views/Start/components/QuestionSettings/index.js","views/Start/components/QuestionCtrl/index.js","views/Start/index.js","plugins/ExpGen.js","plugins/genQuestions.js","store/test/actions.js","views/Test/components/TestSection/index.js","views/Test/components/TestCtrl/index.js","views/Test/index.js","views/HistoryIndex/index.js","views/History/index.js","App.js","store/start/reducer.js","store/test/reducer.js","store/reducer.js","store/index.js","index.js"],"names":["Footer","props","className","divider","CopyrightOutlined","AntDesignOutlined","Home","src","HomeChecked","alt","size","to","component","type","UPDATE_QUESTION_TYPES","UPDATE_QUESTION_SETTINGSS","actionQuestionSettings","value","QuestionType","dispatch","useDispatch","typeText","typeKey","number","useSelector","state","getIn","updateQuestionTypes","isNaN","actionQuestionTypes","min","max","onChange","QuestionSettings","settings","toJS","isCustom","hhc","updateSwitch","checked","key","Group","e","target","split","buttonStyle","Button","range","disabled","minus","checkedChildren","unCheckedChildren","bracket","dot","dotRange","Option","QuestionCtrl","icon","RestOutlined","GithubOutlined","href","Start","gutter","xs","md","defaultSettings","ExpGen","this","_updateSettings","rand","Math","random","round","elementArray","elementNumber","_getRandomNumber","i","push","map","val","dotNum","concat","calsArray","expression","shift","join","exp","startIndex","endIndex","startRand","endRand","elements","length","includes","splice","Promise","resolve","reject","s","exps","_genExpression","_insertBracket","ans","evaluate","checker","Number","isFinite","abs","toFixed","toString","genQuestions","rawExps","fillBlank","judge","select","fillBlankExps","index","userAns","status","_genFillBlank","judgeExps","newVal","_genJudge","selectExps","fillBlankQuestions","judgeQuestions","selectQuestions","selections","_genSelect","UPDATE_ALL_QUESTIONS","actionAllQuestions","UPDATE_FILL_BLANK_QUESTIONS","UPDATE_JUDGE_QUESTIONS","UPDATE_SELECT_QUESTIONS","SAVE_ALL_QUESTIONS","REMOVE_HISTORY","TestSection","questions","questionType","columnTitle","columnRender","record","actionFillBlankQuestions","answer","optionType","options","label","CheckOutlined","CloseOutlined","actionJudgeQuestions","actionSelectQuestions","dataSource","rowKey","pagination","tableLayout","Column","title","dataIndex","align","width","render","TestCtrl","setLoading","RedoOutlined","danger","onClick","LoginOutlined","expGen","Test","questionSettings","get","questionsAreEmpty","useState","loading","useEffect","a","getExpressions","setTimeout","spinning","HistoryIndex","match","useRouteMatch","history","historyID","path","actionRemoveHistory","renderStatus","CheckCircleTwoTone","twoToneColor","CloseCircleTwoTone","renderAnswer","History","useParams","forEach","console","log","historyQuestions","App","withRouter","menuItems","SettingOutlined","text","FormOutlined","HistoryOutlined","InfoCircleOutlined","mode","selectedKeys","location","pathname","Item","EASY_SETTINGS","fromJS","HARD_SETTINGS","defaultState","questionTypes","reducer","prevState","action","mergeDeep","set","oldList","newList","maxID","newHistory","Object","keys","question","combineReducers","start","test","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","ReactDOM","autoInsertSpaceInButton","locale","zh_CN","document","getElementById"],"mappings":"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","file":"static/js/main.2db957e4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/HomeChecked.65863f2e.svg\";","import React from 'react';\nimport { Divider } from 'antd';\nimport { CopyrightOutlined, AntDesignOutlined } from '@ant-design/icons';\n\nfunction Footer(props) {\n  return (\n    <div className=\"footer\">\n      {props.divider && <Divider />}\n      <div className=\"footer-content\">\n        <div>\n          <CopyrightOutlined />\n          <span>&nbsp;Copyright 2020 DSRKafuU | Apache-2.0 License</span>\n        </div>\n        <div>\n          <AntDesignOutlined />\n          <span>&nbsp;NJUPTB18030620 | 2020.10.26</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Footer;\n","import { Button, Space } from 'antd';\nimport { Link } from 'react-router-dom';\nimport HomeChecked from '../../assets/svg/HomeChecked.svg';\nimport './index.scss';\n\nimport Footer from '../../components/Footer';\n\n/**\n * home page\n */\nfunction Home() {\n  return (\n    <div className=\"home\">\n      <div className=\"home-title\">\n        <img src={HomeChecked} className=\"home-title-logo\" alt=\"Title Logo\" />\n        <h1 className=\"home-title-name\">四则运算自测系统</h1>\n        <div className=\"home-title-btns\">\n          <Space size=\"large\">\n            <Link to=\"/app/start\" component={Button} type=\"primary\" size=\"large\">\n              开始\n            </Link>\n            <Link to=\"/app/about\" component={Button} size=\"large\">\n              关于\n            </Link>\n          </Space>\n        </div>\n      </div>\n      <Footer divider={false} />\n    </div>\n  );\n}\n\nexport default Home;\n","// update question types\nexport const UPDATE_QUESTION_TYPES = 'UPDATE_QUESTION_TYPES';\nexport const actionQuestionTypes = (value) => ({\n  type: UPDATE_QUESTION_TYPES,\n  value,\n});\n\n// update question settings\nexport const UPDATE_QUESTION_SETTINGSS = 'UPDATE_QUESTION_SETTINGSS';\nexport const actionQuestionSettings = (value) => ({\n  type: UPDATE_QUESTION_SETTINGSS,\n  value,\n});\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// store\nimport { actionQuestionTypes } from '../../../../store/start/actions';\n// antd\nimport { Slider, InputNumber } from 'antd';\n\n/**\n * one question type\n * @param {string} typeText type name\n * @param {string} typeKey type key\n */\nfunction QuestionType(props) {\n  const dispatch = useDispatch();\n  // get data from props\n  const { typeText, typeKey } = props;\n  // get question type numbers\n  const number = useSelector((state) => state.getIn(['start', 'questionTypes', typeKey]));\n  /**\n   * update question types\n   * @param {number} value\n   */\n  const updateQuestionTypes = (value) => {\n    if (isNaN(value)) {\n      return;\n    }\n    // dispatch update\n    return dispatch(actionQuestionTypes({ [typeKey]: value }));\n  };\n\n  return (\n    <div className=\"question-types-item\">\n      <span>{typeText}</span>\n      <Slider min={0} max={10} value={number} onChange={updateQuestionTypes} />\n      <InputNumber min={0} max={10} value={number} onChange={updateQuestionTypes} />\n    </div>\n  );\n}\n\nexport default QuestionType;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// antd\nimport { Radio, Switch, Select } from 'antd';\n// store\nimport { actionQuestionSettings } from '../../../../store/start/actions';\n\nfunction QuestionSettings() {\n  const dispatch = useDispatch();\n  // get settings data\n  const settings = useSelector((state) => state.getIn(['start', 'questionSettings']).toJS());\n  // get custom data\n  const isCustom = settings.hhc === 'custom';\n  /**\n   * update hhc\n   * @param {event} e\n   */\n  const updateHhc = (e) => dispatch(actionQuestionSettings({ hhc: e.target.value.split('-')[1] }));\n  /**\n   * update range, parse string to number\n   * @param {event} e\n   */\n  const updateRange = (e) =>\n    dispatch(actionQuestionSettings({ range: +e.target.value.split('-')[1] }));\n  /**\n   * update switches\n   * @param {boolean} checked\n   * @param {string} key\n   */\n  const updateSwitch = (checked, key) => dispatch(actionQuestionSettings({ [key]: checked }));\n  /**\n   * update dot range\n   * @param {string} value\n   */\n  const updateDotRange = (value) =>\n    dispatch(actionQuestionSettings({ dotRange: +value.split('-')[1] }));\n\n  return (\n    <div className=\"question-settings\">\n      <h3>难度与细节设置</h3>\n      <div className=\"question-settings-item\">\n        <span>难度</span>\n        <Radio.Group value={`hdc-${settings.hhc}`} onChange={updateHhc} buttonStyle=\"solid\">\n          <Radio.Button value=\"hdc-easy\">简单</Radio.Button>\n          <Radio.Button value=\"hdc-hard\">困难</Radio.Button>\n          <Radio.Button value=\"hdc-custom\">自定义</Radio.Button>\n        </Radio.Group>\n      </div>\n      <div className=\"question-settings-item\">\n        <span>数值范围「绝对值」</span>\n        <Radio.Group\n          value={`range-${settings.range}`}\n          onChange={updateRange}\n          disabled={!isCustom}\n          buttonStyle=\"solid\"\n        >\n          <Radio.Button value=\"range-10\">10</Radio.Button>\n          <Radio.Button value=\"range-100\">100</Radio.Button>\n          <Radio.Button value=\"range-1000\">1000</Radio.Button>\n        </Radio.Group>\n        <span>以内</span>\n      </div>\n      <div className=\"question-settings-item\">\n        <div>\n          <span>负数</span>\n          <Switch\n            checked={settings.minus}\n            disabled={!isCustom}\n            onChange={(checked) => updateSwitch(checked, 'minus')}\n            checkedChildren=\"开启\"\n            unCheckedChildren=\"关闭\"\n          />\n        </div>\n        <div>\n          <span>括号</span>\n          <Switch\n            checked={settings.bracket}\n            disabled={!isCustom}\n            onChange={(checked) => updateSwitch(checked, 'bracket')}\n            checkedChildren=\"开启\"\n            unCheckedChildren=\"关闭\"\n          />\n        </div>\n      </div>\n      <div className=\"question-settings-item\">\n        <div>\n          <span>小数</span>\n          <Switch\n            checked={settings.dot}\n            disabled={!isCustom}\n            onChange={(checked) => updateSwitch(checked, 'dot')}\n            checkedChildren=\"开启\"\n            unCheckedChildren=\"关闭\"\n          />\n        </div>\n        <div>\n          <span>小数位数</span>\n          <Select disabled={!isCustom} value={`dot-${settings.dotRange}`} onChange={updateDotRange}>\n            <Select.Option value=\"dot-1\">1</Select.Option>\n            <Select.Option value=\"dot-2\">2</Select.Option>\n            <Select.Option value=\"dot-3\">3</Select.Option>\n          </Select>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default QuestionSettings;\n","import React from 'react';\n// antd\nimport { Button, Space } from 'antd';\nimport { RestOutlined, GithubOutlined } from '@ant-design/icons';\n\nfunction QuestionCtrl() {\n  return (\n    <div className=\"question-ctrl\">\n      <h3 className=\"question-ctrl-func\">全局功能</h3>\n      <Space>\n        <Button icon={<RestOutlined />}>清除缓存</Button>\n        <Button\n          icon={<GithubOutlined />}\n          href=\"https://github.com/amzrk2/pouni-calculation-tester\"\n          target=\"_blank\"\n        >\n          GitHub\n        </Button>\n      </Space>\n      <h3 className=\"question-ctrl-notice\">提示</h3>\n      <h4>小数开启</h4>\n      <span>答案请化为与设置的位数相同的精度</span>\n      <h4>负数/小数/数值范围</h4>\n      <span>这些设置项对生成的答案同样有效</span>\n    </div>\n  );\n}\n\nexport default QuestionCtrl;\n","import React from 'react';\n// antd\nimport { Row, Col } from 'antd';\n// css\nimport './index.scss';\n// components\nimport QuestionType from './components/QuestionType';\nimport QuestionSettings from './components/QuestionSettings';\nimport QuestionCtrl from './components/QuestionCtrl';\n\nfunction Start() {\n  return (\n    <div className=\"start\">\n      <Row gutter={[0, 32]}>\n        <Col xs={24} md={8}>\n          <div className=\"question-types\">\n            <h3>类型与数量调整</h3>\n            <QuestionType typeText=\"填空题\" typeKey=\"fillBlank\" />\n            <QuestionType typeText=\"判断题\" typeKey=\"judge\" />\n            <QuestionType typeText=\"选择题\" typeKey=\"select\" />\n          </div>\n        </Col>\n        <Col xs={24} md={8}>\n          <QuestionSettings />\n        </Col>\n        <Col xs={24} md={8}>\n          <QuestionCtrl />\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Start;\n","import { evaluate } from 'mathjs';\n\nconst defaultSettings = {\n  hhc: 'easy',\n  range: 10,\n  minus: false,\n  bracket: false,\n  dot: false,\n  dotRange: 1,\n};\n\nclass ExpGen {\n  /**\n   * @constructor\n   */\n  constructor() {\n    // init settings\n    this._updateSettings(defaultSettings);\n  }\n\n  /**\n   * @private\n   * update generator settings\n   * @param {object} settings\n   */\n  _updateSettings(settings) {\n    this.hhc = settings.hhc;\n    this.range = settings.range;\n    this.minus = settings.minus;\n    this.bracket = settings.bracket;\n    this.dot = settings.dot;\n    this.dotRange = settings.dotRange;\n  }\n\n  /**\n   * @private\n   * get random number\n   * @param {number} min\n   * @param {number} max\n   */\n  _getRandomNumber(min, max) {\n    const range = max - min;\n    const rand = Math.random(); // 0.0-1.0\n    return min + Math.round(rand * range);\n  }\n\n  /**\n   * @private\n   * gen a expression (un processed)\n   */\n  _genExpression() {\n    // gen elements\n    let elementArray = [];\n    // el number\n    const elementNumber = this._getRandomNumber(2, 5);\n    for (let i = 0; i < elementNumber; i++) {\n      elementArray.push(this._getRandomNumber(0, this.range));\n    }\n    // if dot\n    if (this.dot) {\n      elementArray = elementArray.map((val) => {\n        // gen dot number\n        let dotNum = '';\n        for (let i = 0; i < this.dotRange; i++) {\n          dotNum = dotNum.concat(this._getRandomNumber(0, 9));\n        }\n        return `${val}.${dotNum}`;\n      });\n    }\n    // if minus\n    if (this.minus) {\n      elementArray = elementArray.map((val) => {\n        // random minus\n        const rand = Math.random();\n        if (rand - 0.5 > 0) {\n          return val;\n        } else {\n          return `(-${val})`;\n        }\n      });\n    }\n    // cals\n    const calsArray = [];\n    for (let i = 0; i < elementNumber - 1; i++) {\n      calsArray.push([' + ', ' - ', ' * ', ' / '][this._getRandomNumber(0, 3)]);\n    }\n    // gen expression\n    const expression = [];\n    for (let i = 0; i < 2 * elementNumber - 1; i++) {\n      if (i % 2 === 0) {\n        expression.push(elementArray.shift());\n      } else {\n        expression.push(calsArray.shift());\n      }\n    }\n    // return expressiong\n    return expression.join('');\n  }\n\n  /**\n   * insert brackets, element number need to > 3\n   * @param {string} exp\n   */\n  _insertBracket(exp) {\n    const startRand = Math.random() - 0.5;\n    const endRand = Math.random() - 0.5;\n    const elements = exp.split(' ');\n    let startIndex, endIndex;\n    // find first op\n    for (let i = 0; i < elements.length; i++) {\n      if (['+', '-', '*', '/'].includes(elements[i])) {\n        startIndex = i;\n        break;\n      }\n    }\n    // find second op\n    if (startRand > 0) {\n      for (let i = startIndex; i < elements.length; i++) {\n        if (['+', '-', '*', '/'].includes(elements[i])) {\n          startIndex = i;\n          break;\n        }\n      }\n    }\n    // find last first op\n    for (let i = elements.length - 1; i >= 0; i--) {\n      if (['+', '-', '*', '/'].includes(elements[i])) {\n        endIndex = i;\n        break;\n      }\n    }\n    // find last second op\n    if (endRand > 0) {\n      for (let i = endIndex; i >= 0; i--) {\n        if (['+', '-', '*', '/'].includes(elements[i])) {\n          endIndex = i;\n          break;\n        }\n      }\n    }\n    // insert bracket\n    if (endIndex - startIndex !== 4 && endIndex - 1 > startIndex + 1) {\n      elements.splice(startIndex + 1, 0, '(');\n      elements.splice(endIndex - 1, 0, ')');\n      return elements.join(' ');\n    } else {\n      return exp;\n    }\n  }\n\n  /**\n   * @public\n   * generate expressions, returns a promise\n   * @param {number} number\n   * @param {objext} settings\n   */\n  getExpressions(number, settings) {\n    return new Promise((resolve, reject) => {\n      try {\n        // if pssed in settings, update settings\n        if (settings) {\n          const s = { ...defaultSettings, ...settings };\n          this._updateSettings(s);\n        }\n        // gen expressions\n        const exps = [];\n        for (let i = 0; i < number; i++) {\n          let exp = this._genExpression();\n          this.bracket && (exp = this._insertBracket(exp)); // insert bracket\n          let ans = evaluate(exp);\n          // prevent minus and dot\n          let checker;\n          switch (true) {\n            case !this.minus && !this.dot:\n              checker = (ans) =>\n                Number.isFinite(ans) &&\n                !Number.isNaN(ans) &&\n                ans % 1 === 0 &&\n                ans >= 0 &&\n                Math.abs(Math.round(ans)) < settings.range;\n              break;\n            case !this.minus && this.dot:\n              checker = (ans) =>\n                Number.isFinite(ans) &&\n                !Number.isNaN(ans) &&\n                ans >= 0 &&\n                Math.abs(Math.round(ans)) < settings.range;\n              break;\n            case this.minus && !this.dot:\n              checker = (ans) =>\n                Number.isFinite(ans) &&\n                !Number.isNaN(ans) &&\n                ans % 1 === 0 &&\n                Math.abs(Math.round(ans)) < settings.range;\n              break;\n            default:\n              checker = (ans) =>\n                Number.isFinite(ans) &&\n                !Number.isNaN(ans) &&\n                Math.abs(Math.round(ans)) < settings.range;\n          }\n          while (!checker(ans)) {\n            exp = this._genExpression();\n            this.bracket && (exp = this._insertBracket(exp)); // insert bracket\n            ans = evaluate(exp);\n          }\n          // if dot, floor to same dot range\n          if (this.dot) {\n            ans = ans.toFixed(this.dotRange);\n          } else {\n            ans = ans.toString();\n          }\n          // add exp\n          exps.push({ exp, ans });\n        }\n        resolve(exps);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n\nexport default ExpGen;\n","/**\n * @private\n * get random number\n * @param {number} min\n * @param {number} max\n */\nfunction _getRandomNumber(min, max) {\n  const range = max - min;\n  const rand = Math.random(); // 0.0-1.0\n  return min + Math.round(rand * range);\n}\n\n/**\n * generate fill in blank questions\n * @param {array} rawExps\n */\nfunction _genFillBlank(rawExps) {\n  const questions = rawExps.map((val, index) => ({\n    index,\n    exp: val.exp,\n    ans: val.ans,\n    userAns: '',\n    status: null,\n  }));\n  return questions;\n}\n\n/**\n * generate judge questions\n * @param {array} rawExps\n * @param {number} dotRange\n */\nfunction _genJudge(rawExps, dotRange) {\n  const questions = rawExps.map((val, index) => {\n    const newVal = { index, userAns: null, status: null };\n    const rand = _getRandomNumber(0, 1);\n    if (rand === 1) {\n      newVal.exp = `${val.exp} = ${val.ans}`;\n      newVal.ans = true;\n    } else {\n      newVal.exp = `${val.exp} = ${(Number(val.ans) + _getRandomNumber(1, 50)).toFixed(dotRange)}`;\n      newVal.ans = false;\n    }\n    return newVal;\n  });\n  return questions;\n}\n\n/**\n * generate select questions\n * @param {array} rawExps\n * @param {number} dotRange\n */\nfunction _genSelect(rawExps, dotRange) {\n  const questions = rawExps.map((val, index) => {\n    const newVal = { index, exp: val.exp, userAns: null, status: null };\n    const rand = _getRandomNumber(0, 2);\n    const selections = [\n      (Number(val.ans) + _getRandomNumber(1, 50)).toFixed(dotRange),\n      (Number(val.ans) + _getRandomNumber(1, 50)).toFixed(dotRange),\n      (Number(val.ans) + _getRandomNumber(1, 50)).toFixed(dotRange),\n    ];\n    selections[rand] = val.ans;\n    newVal.selections = selections;\n    newVal.ans = rand;\n    return newVal;\n  });\n  return questions;\n}\n\n/**\n * generate questions\n * @param {array} rawExps\n * @param {number} fillBlank\n * @param {number} judge\n * @param {number} select\n * @param {object} settings\n */\nfunction genQuestions(rawExps, fillBlank, judge, select, settings) {\n  let fillBlankExps = [];\n  for (let i = 0; i < fillBlank; i++) {\n    fillBlankExps.push(rawExps.shift());\n  }\n  fillBlankExps = _genFillBlank(fillBlankExps);\n  let judgeExps = [];\n  for (let i = fillBlank; i < fillBlank + judge; i++) {\n    judgeExps.push(rawExps.shift());\n  }\n  judgeExps = _genJudge(judgeExps, settings.dot ? settings.dotRange : 0);\n  let selectExps = [];\n  for (let i = fillBlank + judge; i < fillBlank + judge + select; i++) {\n    selectExps.push(rawExps.shift());\n  }\n  selectExps = _genSelect(selectExps, settings.dot ? settings.dotRange : 0);\n  return {\n    fillBlankQuestions: fillBlankExps,\n    judgeQuestions: judgeExps,\n    selectQuestions: selectExps,\n  };\n}\n\nexport default genQuestions;\n","// update all questions\nexport const UPDATE_ALL_QUESTIONS = 'UPDATE_ALL_QUESTIONS';\nexport const actionAllQuestions = (value) => {\n  return {\n    type: UPDATE_ALL_QUESTIONS,\n    value,\n  };\n};\n\n// update fill blank questions\nexport const UPDATE_FILL_BLANK_QUESTIONS = 'UPDATE_FILL_BLANK_QUESTIONS';\nexport const actionFillBlankQuestions = (value) => {\n  return {\n    type: UPDATE_FILL_BLANK_QUESTIONS,\n    value,\n  };\n};\n\n// update judge questions\nexport const UPDATE_JUDGE_QUESTIONS = 'UPDATE_JUDGE_QUESTIONS';\nexport const actionJudgeQuestions = (value) => {\n  return {\n    type: UPDATE_JUDGE_QUESTIONS,\n    value,\n  };\n};\n\n// update select questions\nexport const UPDATE_SELECT_QUESTIONS = 'UPDATE_SELECT_QUESTIONS';\nexport const actionSelectQuestions = (value) => {\n  return {\n    type: UPDATE_SELECT_QUESTIONS,\n    value,\n  };\n};\n\n// save and check questions\nexport const SAVE_ALL_QUESTIONS = 'SAVE_ALL_QUESTIONS';\nexport const actionSaveAllQuestion = () => {\n  return {\n    type: SAVE_ALL_QUESTIONS,\n  };\n};\n\n// remove a history\nexport const REMOVE_HISTORY = 'REMOVE_HISTORY';\nexport const actionRemoveHistory = (value) => {\n  return {\n    type: REMOVE_HISTORY,\n    value,\n  };\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n// antd\nimport { Table, Input, Radio } from 'antd';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n// store\nimport {\n  actionFillBlankQuestions,\n  actionJudgeQuestions,\n  actionSelectQuestions,\n} from '../../../../store/test/actions';\n\n/**\n * gen a test selection\n * @param {object} props\n */\nfunction TestSection(props) {\n  const dispatch = useDispatch();\n  // get props\n  const { questions, questionType } = props;\n\n  // check question type\n  let columnTitle = '';\n  let columnRender = null;\n  if (questionType === 'fillBlank') {\n    columnTitle = '填空';\n    columnRender = (record) => (\n      <Input\n        value={record.userAns}\n        onChange={(e) => {\n          const value = e.target.value;\n          dispatch(actionFillBlankQuestions({ index: record.index, answer: value }));\n        }}\n      />\n    );\n  } else if (questionType === 'judge') {\n    columnTitle = '判断';\n    columnRender = (record) => (\n      <Radio.Group\n        className=\"radio-group-judge\"\n        optionType=\"button\"\n        options={[\n          {\n            label: <CheckOutlined />,\n            value: true,\n          },\n          {\n            label: <CloseOutlined />,\n            value: false,\n          },\n        ]}\n        value={record.userAns}\n        onChange={(e) => {\n          const value = e.target.value;\n          dispatch(actionJudgeQuestions({ index: record.index, answer: value }));\n        }}\n      />\n    );\n  } else {\n    columnTitle = '选择';\n    columnRender = (record) => (\n      <Radio.Group\n        options={[\n          { label: record.selections[0], value: 0 },\n          { label: record.selections[1], value: 1 },\n          { label: record.selections[2], value: 2 },\n        ]}\n        value={record.userAns}\n        onChange={(e) => {\n          const value = e.target.value;\n          dispatch(actionSelectQuestions({ index: record.index, answer: value }));\n        }}\n      />\n    );\n  }\n\n  return (\n    <div className=\"test-section\">\n      <Table\n        dataSource={questions}\n        rowKey={(record) => record.index}\n        pagination={false}\n        size=\"middle\"\n        tableLayout=\"fixed\"\n      >\n        <Table.Column title=\"题目\" dataIndex=\"exp\" key=\"exp\" align=\"right\" width=\"60%\" />\n        <Table.Column title={columnTitle} key=\"userAns\" render={columnRender} />\n      </Table>\n    </div>\n  );\n}\n\nexport default TestSection;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n// antd\nimport { Button } from 'antd';\nimport { RedoOutlined, LoginOutlined } from '@ant-design/icons';\n// store\nimport { actionAllQuestions, actionSaveAllQuestion } from '../../../../store/test/actions';\n\n/**\n * test control section\n * @param {object} props\n */\nfunction TestCtrl(props) {\n  const dispatch = useDispatch();\n  // get props\n  const { setLoading } = props;\n\n  return (\n    <div className=\"test-ctrl\">\n      <div className=\"crtl-wrapper\">\n        <Button\n          size=\"large\"\n          icon={<RedoOutlined />}\n          danger={true}\n          onClick={() => {\n            setLoading(true);\n            return dispatch(actionAllQuestions(null));\n          }}\n        />\n        <Button\n          type=\"primary\"\n          size=\"large\"\n          icon={<LoginOutlined />}\n          onClick={() => dispatch(actionSaveAllQuestion())}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TestCtrl;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// antd\nimport { Spin } from 'antd';\n// css\nimport './index.scss';\n// exp gens\nimport ExpGen from '../../plugins/ExpGen';\nimport genQuestions from '../../plugins/genQuestions';\n// store\nimport { actionAllQuestions } from '../../store/test/actions';\n// components\nimport TestSection from './components/TestSection';\nimport TestCtrl from './components/TestCtrl';\n\n// exp generator\nconst expGen = new ExpGen();\n\nfunction Test() {\n  const dispatch = useDispatch();\n  // get settings data\n  const { fillBlank, judge, select } = useSelector((state) =>\n    state.getIn(['start', 'questionTypes']).toJS()\n  );\n  const questionSettings = useSelector((state) =>\n    state.getIn(['start', 'questionSettings']).toJS()\n  );\n  // get questions\n  const { fillBlankQuestions, judgeQuestions, selectQuestions } = useSelector((state) => {\n    return state.get('test').toJS();\n  });\n  // check question status\n  const questionsAreEmpty = !(\n    fillBlankQuestions.length > 0 ||\n    judgeQuestions.length > 0 ||\n    selectQuestions.length > 0\n  );\n  // question loading animation\n  const [loading, setLoading] = useState(true);\n\n  // update questions when data changed\n  // and if currentQuestions been reset to {}\n  // it will run again to gen new questions\n  useEffect(() => {\n    // if question arrays are empty\n    if (questionsAreEmpty) {\n      (async () => {\n        const rawExps = await expGen.getExpressions(fillBlank + judge + select, questionSettings);\n        const questions = genQuestions(rawExps, fillBlank, judge, select, questionSettings);\n        setTimeout(() => {\n          dispatch(actionAllQuestions(questions));\n          setLoading(false);\n        }, 500);\n      })();\n    } else {\n      setLoading(false);\n    }\n  }, [dispatch, fillBlank, judge, questionSettings, questionsAreEmpty, select]);\n\n  return (\n    <div className=\"test\">\n      <Spin spinning={loading}>\n        <div className=\"test-wrapper\">\n          <TestSection questions={fillBlankQuestions} questionType=\"fillBlank\" />\n          <TestSection questions={judgeQuestions} questionType=\"judge\" />\n          <TestSection questions={selectQuestions} questionType=\"select\" />\n        </div>\n      </Spin>\n      <TestCtrl setLoading={setLoading} />\n    </div>\n  );\n}\n\nexport default Test;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n// antd\nimport { Table, Button, Space } from 'antd';\nimport { useRouteMatch, Link } from 'react-router-dom';\n// store\nimport { actionRemoveHistory } from '../../store/test/actions';\n\nfunction HistoryIndex() {\n  const dispatch = useDispatch();\n  // get router match\n  const match = useRouteMatch();\n  // get all history\n  const history = useSelector((state) => {\n    return state.getIn(['test', 'history']).toJS();\n  });\n\n  return (\n    <div className=\"history-index\">\n      <Table\n        dataSource={history}\n        rowKey={(record) => record.historyID}\n        pagination={false}\n        size=\"small\"\n        tableLayout=\"fixed\"\n      >\n        <Table.Column title=\"ID\" dataIndex=\"historyID\" key=\"historyID\" align=\"center\" />\n        <Table.Column\n          title=\"控制\"\n          key=\"control\"\n          align=\"center\"\n          render={(value, record, index) => (\n            <Space>\n              <Link to={`${match.path}/${record.historyID}`} component={Button} type=\"primary\">\n                详情\n              </Link>\n              <Button danger={true} onClick={() => dispatch(actionRemoveHistory(index))}>\n                删除\n              </Button>\n            </Space>\n          )}\n        />\n      </Table>\n    </div>\n  );\n}\n\nexport default HistoryIndex;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n// antd\nimport { Table } from 'antd';\nimport {\n  CheckCircleTwoTone,\n  CloseCircleTwoTone,\n  CheckOutlined,\n  CloseOutlined,\n} from '@ant-design/icons';\n\n/**\n * status render\n * @param {boolean} status\n */\nconst renderStatus = (status) =>\n  status ? (\n    <CheckCircleTwoTone twoToneColor=\"#52c41a\" />\n  ) : (\n    <CloseCircleTwoTone twoToneColor=\"#ff7875\" />\n  );\n/**\n * answer render\n * @param {boolean} ans\n */\nconst renderAnswer = (ans) => (ans ? <CheckOutlined /> : <CloseOutlined />);\n\nfunction History() {\n  // get current history id\n  const { historyID } = useParams();\n  // get data of this id\n  const allHistory = useSelector((state) => state.getIn(['test', 'history']).toJS());\n  let history;\n  allHistory.forEach((val) => {\n    console.log(val.historyID, historyID);\n    if (val.historyID === +historyID) {\n      history = val;\n    }\n  });\n  // get questions\n  let fillBlankQuestions, judgeQuestions, selectQuestions;\n  if (history) {\n    fillBlankQuestions = history.historyQuestions.fillBlankQuestions;\n    judgeQuestions = history.historyQuestions.judgeQuestions;\n    selectQuestions = history.historyQuestions.selectQuestions;\n  }\n\n  return (\n    <div className=\"history\">\n      <Table\n        dataSource={fillBlankQuestions}\n        rowKey={(record) => record.index}\n        pagination={false}\n        size=\"small\"\n        tableLayout=\"fixed\"\n      >\n        <Table.Column title=\"填空题目\" dataIndex=\"exp\" key=\"exp\" align=\"center\" width=\"50%\" />\n        <Table.Column title=\"正确答案\" dataIndex=\"ans\" key=\"ans\" align=\"center\" />\n        <Table.Column title=\"你的答案\" dataIndex=\"userAns\" key=\"userAns\" align=\"center\" />\n        <Table.Column\n          title=\"状态\"\n          key=\"status\"\n          align=\"center\"\n          render={(record) => renderStatus(record.status)}\n          width=\"10%\"\n        />\n      </Table>\n      <Table\n        dataSource={judgeQuestions}\n        rowKey={(record) => record.index}\n        pagination={false}\n        size=\"small\"\n        tableLayout=\"fixed\"\n      >\n        <Table.Column title=\"判断题目\" dataIndex=\"exp\" key=\"exp\" align=\"center\" width=\"50%\" />\n        <Table.Column\n          title=\"正确答案\"\n          dataIndex=\"ans\"\n          key=\"ans\"\n          align=\"center\"\n          render={(record) => renderAnswer(record.ans)}\n        />\n        <Table.Column\n          title=\"你的答案\"\n          key=\"userAns\"\n          align=\"center\"\n          render={(record) => renderAnswer(record.userAns)}\n        />\n        <Table.Column\n          title=\"状态\"\n          key=\"status\"\n          align=\"center\"\n          render={(record) => renderStatus(record.status)}\n          width=\"10%\"\n        />\n      </Table>\n      <Table\n        dataSource={selectQuestions}\n        rowKey={(record) => record.index}\n        pagination={false}\n        size=\"small\"\n        tableLayout=\"fixed\"\n      >\n        <Table.Column title=\"选择题目\" dataIndex=\"exp\" key=\"exp\" align=\"center\" width=\"50%\" />\n        <Table.Column title=\"正确答案\" dataIndex=\"ans\" key=\"ans\" align=\"center\" />\n        <Table.Column title=\"你的答案\" dataIndex=\"userAns\" key=\"userAns\" align=\"center\" />\n        <Table.Column\n          title=\"状态\"\n          key=\"status\"\n          align=\"center\"\n          render={(record) => renderStatus(record.status)}\n          width=\"10%\"\n        />\n      </Table>\n    </div>\n  );\n}\n\nexport default History;\n","// deps\nimport React from 'react';\nimport { Switch, Route, Link, useRouteMatch, withRouter, Redirect } from 'react-router-dom';\nimport { Menu } from 'antd';\nimport {\n  SettingOutlined,\n  FormOutlined,\n  HistoryOutlined,\n  InfoCircleOutlined,\n} from '@ant-design/icons';\n// views\nimport Footer from './components/Footer';\nimport Start from './views/Start';\nimport Test from './views/Test';\nimport HistoryIndex from './views/HistoryIndex';\nimport History from './views/History';\n\n/**\n * app main page\n */\nconst App = withRouter(({ history }) => {\n  // router match\n  const match = useRouteMatch();\n  // menu items\n  const menuItems = [\n    {\n      key: 'start',\n      icon: <SettingOutlined />,\n      text: '开始',\n    },\n    {\n      key: 'test',\n      icon: <FormOutlined />,\n      text: '测试',\n    },\n    {\n      key: 'history',\n      icon: <HistoryOutlined />,\n      text: '历史记录',\n    },\n    {\n      key: 'about',\n      icon: <InfoCircleOutlined />,\n      text: '关于',\n    },\n  ];\n\n  return (\n    <div className=\"app\">\n      <Menu className=\"app-nav\" mode=\"horizontal\" selectedKeys={[history.location.pathname]}>\n        {menuItems.map((val) => (\n          <Menu.Item key={`${match.path}/${val.key}`}>\n            <Link to={`${match.path}/${val.key}`}>\n              {val.icon}\n              <span>{val.text}</span>\n            </Link>\n          </Menu.Item>\n        ))}\n      </Menu>\n      <div className=\"app-content\">\n        <Switch>\n          <Route path={`${match.path}/start`} component={Start} />\n          <Route path={`${match.path}/test`} component={Test} />\n          <Route path={`${match.path}/history/:historyID`} component={History} />\n          <Route path={`${match.path}/history`} component={HistoryIndex} />\n          <Route path={`${match.path}/about`}>关于</Route>\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n      <Footer divider={true} />\n    </div>\n  );\n});\n\nexport default App;\n","import { fromJS } from 'immutable';\nimport { UPDATE_QUESTION_TYPES, UPDATE_QUESTION_SETTINGSS } from './actions';\n\n// intergated settings\nconst EASY_SETTINGS = fromJS({\n  hhc: 'easy',\n  range: 10,\n  minus: false,\n  bracket: false,\n  dot: false,\n  dotRange: 1,\n});\nconst HARD_SETTINGS = fromJS({\n  hhc: 'hard',\n  range: 100,\n  minus: true,\n  bracket: true,\n  dot: true,\n  dotRange: 2,\n});\n\nconst defaultState = fromJS({\n  questionTypes: {\n    fillBlank: 2, // fill in blanks\n    judge: 4, // judgements\n    select: 3, // selections\n  },\n  questionSettings: EASY_SETTINGS,\n});\n\nconst reducer = (prevState = defaultState, action) => {\n  switch (action.type) {\n    // update question types\n    case UPDATE_QUESTION_TYPES:\n      return prevState.mergeDeep(fromJS({ questionTypes: action.value }));\n    // update question settings\n    case UPDATE_QUESTION_SETTINGSS:\n      if (action.value.hhc === 'easy') {\n        return prevState.mergeDeep(fromJS({ questionSettings: EASY_SETTINGS }));\n      } else if (action.value.hhc === 'hard') {\n        return prevState.mergeDeep(fromJS({ questionSettings: HARD_SETTINGS }));\n      }\n      return prevState.mergeDeep(fromJS({ questionSettings: action.value }));\n    // init\n    default:\n      return prevState;\n  }\n};\n\nexport default reducer;\n","import { fromJS } from 'immutable';\nimport {\n  SAVE_ALL_QUESTIONS,\n  UPDATE_ALL_QUESTIONS,\n  UPDATE_FILL_BLANK_QUESTIONS,\n  UPDATE_JUDGE_QUESTIONS,\n  UPDATE_SELECT_QUESTIONS,\n  REMOVE_HISTORY,\n} from './actions';\n\nconst defaultState = fromJS({\n  fillBlankQuestions: [],\n  judgeQuestions: [],\n  selectQuestions: [],\n  history: [],\n});\n\nconst reducer = (prevState = defaultState, action) => {\n  switch (action.type) {\n    // update all questions\n    case UPDATE_ALL_QUESTIONS: {\n      if (action.value) {\n        return prevState\n          .set('fillBlankQuestions', fromJS(action.value.fillBlankQuestions))\n          .set('judgeQuestions', fromJS(action.value.judgeQuestions))\n          .set('selectQuestions', fromJS(action.value.selectQuestions));\n      } else {\n        // reset but not history\n        return prevState\n          .set('fillBlankQuestions', fromJS([]))\n          .set('judgeQuestions', fromJS([]))\n          .set('selectQuestions', fromJS([]));\n      }\n    }\n    // update fill blank questions { index, answer }\n    case UPDATE_FILL_BLANK_QUESTIONS: {\n      const { index, answer } = action.value;\n      const oldList = prevState.get('fillBlankQuestions');\n      const newList = oldList.set(index, oldList.get(index).set('userAns', answer));\n      return prevState.set('fillBlankQuestions', newList);\n    }\n    // update judge questions { index, answer }\n    case UPDATE_JUDGE_QUESTIONS: {\n      const { index, answer } = action.value;\n      const oldList = prevState.get('judgeQuestions');\n      const newList = oldList.set(index, oldList.get(index).set('userAns', answer));\n      return prevState.set('judgeQuestions', newList);\n    }\n    // update select questions { index, answer }\n    case UPDATE_SELECT_QUESTIONS: {\n      const { index, answer } = action.value;\n      const oldList = prevState.get('selectQuestions');\n      const newList = oldList.set(index, oldList.get(index).set('userAns', answer));\n      return prevState.set('selectQuestions', newList);\n    }\n    case SAVE_ALL_QUESTIONS: {\n      const oldList = prevState.get('history');\n      // gen new history, generate a id\n      let maxID = 0;\n      if (oldList.toJS().length > 0) {\n        oldList.forEach((val) => {\n          val.get('historyID') > maxID && (maxID = val.get('historyID'));\n        });\n      } else {\n        maxID = -1;\n      }\n      const newHistory = {\n        historyID: maxID + 1,\n        historyQuestions: {\n          fillBlankQuestions: prevState.get('fillBlankQuestions').toJS(),\n          judgeQuestions: prevState.get('judgeQuestions').toJS(),\n          selectQuestions: prevState.get('selectQuestions').toJS(),\n        },\n      };\n      // check answers\n      Object.keys(newHistory.historyQuestions).forEach((key) => {\n        newHistory.historyQuestions[key].forEach((question) => {\n          question.status = question.ans === question.userAns;\n        });\n      });\n      // add a history\n      const newList = oldList.push(fromJS(newHistory));\n      return prevState.set('history', newList);\n    }\n    // remove a history p: index\n    case REMOVE_HISTORY: {\n      const oldList = prevState.get('history');\n      const newList = oldList.splice(action.value, 1);\n      return prevState.set('history', newList);\n    }\n    // init\n    default:\n      return prevState;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux-immutable';\n// reducers\nimport { reducer as start } from './start';\nimport { reducer as test } from './test';\n\n// combine reducers\nexport default combineReducers({\n  start,\n  test,\n});\n","import { createStore } from 'redux';\n// preloaded state\nimport reducer from './reducer';\n// apply devtools\nconst enhancer = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n// create store\nconst store = createStore(reducer, enhancer);\n\nexport default store;\n","// deps\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// css\nimport 'normalize.css';\nimport './index.scss';\n// antd config provider\nimport { ConfigProvider } from 'antd';\nimport zh_CN from 'antd/es/locale/zh_CN';\n// views\nimport Home from './views/Home';\nimport App from './App';\n// store\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConfigProvider autoInsertSpaceInButton={false} locale={zh_CN}>\n      <Router>\n        <Switch>\n          <Route path=\"/app\" component={App} />\n          <Route path=\"/\" component={Home} />\n        </Switch>\n      </Router>\n    </ConfigProvider>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}